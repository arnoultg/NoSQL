
------------------ Création de la DB-------------------------
CREATE DATABASE Relational;
USE Relational;


------------------Création des Tables-----------------------
CREATE TABLE Users (
  user_id INT(11) PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(50)
);

CREATE TABLE Products (
  product_id INT PRIMARY KEY AUTO_INCREMENT,
  product_name VARCHAR(50)
);

CREATE TABLE Purchases (
  purchase_id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  product_id INT,
  purchase_date DATE,
  FOREIGN KEY (user_id) REFERENCES Users(user_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Follows (
  follow_id INT PRIMARY KEY AUTO_INCREMENT,
  follower_id INT,
  followee_id INT,
  follow_date DATE,
  FOREIGN KEY (follower_id) REFERENCES Users(user_id),
  FOREIGN KEY (followee_id) REFERENCES Users(user_id)
);
----------------Insertion des données --------------------------
INSERT INTO Users (username)
SELECT CONCAT('User ', n)
FROM (SELECT ROW_NUMBER() OVER () AS n FROM information_schema.columns) AS nums
WHERE n <= 1000000;

INSERT INTO Follows (follow_id, follower_id, followee_id, follow_date)
SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) AS follow_id,
  u1.user_id AS follower_id,
  u2.user_id AS followee_id,
  DATE_ADD('2000-01-01', INTERVAL FLOOR(RAND() * 7305) DAY) AS follow_date
FROM Users u1, Users u2
WHERE u1.user_id <> u2.user_id AND RAND() < 0.2;

INSERT INTO Products (product_id, product_name)
SELECT n, CONCAT('Product ', n)
FROM (SELECT ROW_NUMBER() OVER () AS n FROM information_schema.columns) AS nums
WHERE n <= 10000;

INSERT INTO Purchases (purchase_id, user_id, product_id, purchase_date)
SELECT ROW_NUMBER() OVER () AS purchase_id,
  u.user_id, p.product_id, DATE_ADD(CURDATE(), INTERVAL -FLOOR(RAND() * 3650) DAY)
FROM Users u, Products p
WHERE RAND() < 0.02;


------------------INDEX-------------------

CREATE INDEX idx_followers_followee_id ON Follows (followee_id);
CREATE INDEX idx_purchases_user_id ON Purchases (user_id);
CREATE INDEX idx_purchases_product_id ON Purchases (product_id);
CREATE INDEX idx_products_product_name ON Products (product_name);

------------------Requete 1 ------------

--On demande a l'utilisateurs de rentré un user et un niveau de profondeur.

--$LEVEL
--$Follower_ID

INSERT INTO Follows (follower_id, followee_id, follow_date)
SELECT u1.user_id, u2.user_id, CURDATE()
FROM Users u1
JOIN Users u2 ON u1.user_id <> u2.user_id
WHERE u1.user_id BETWEEN 1 AND (SELECT MAX(u1.user_id) FROM Users)
AND u2.user_id BETWEEN 1 AND (SELECT MAX(u2.user_id) FROM Users)
AND RAND() < 0.1
AND (SELECT COUNT(*) FROM Follows WHERE follower_id = u1.user_id) < 20
AND NOT EXISTS (SELECT * FROM Follows f WHERE f.follower_id = u1.user_id AND f.followee_id = u2.user_id);


-- On peut changer le LEVEL pour avoir une profondeur selon ce que l'on souhaite
-- Le choix de l'utilisateur est le centre de notre cercle on peut changer pour spécifier un utilisateur particulier ( Ici un influanceur est pertinant)


------------------Requete 2 ------------


--On demande a l'utilisateurs de rentré un influancere et un niveau de profondeur.

--$LEVEL
--$Follower_ID
--$Product_Name

WITH RECURSIVE followers(follower_id, followee_id, level) AS (
SELECT follower_id, followee_id, 1 FROM Follows WHERE follower_id = $Follower_ID
   UNION
   SELECT f.follower_id, f.followee_id, level + 1
   FROM Follows f
   JOIN followers ON f.follower_id = followers.followee_id
   WHERE level < $LEVEL
 )
 SELECT f.follower_id , p.product_id, p.product_name, COUNT(*) as num_purchases
 FROM followers f
 JOIN Purchases pur ON f.followee_id = pur.user_id
 JOIN Products p ON pur.product_id = p.product_id
 WHERE p.product_name= $Product_Name
 ORDER BY f.follower_id;
 
 
 -------------Requete 3 -----------------
 
 
-- Remplacer $PRODUCT_ID par l'identifiant du produit recherché
-- Remplacer $LEVEL par le niveau maximal souhaité pour le cercle de followers

SELECT COUNT(DISTINCT f.followee_id) AS num_followees
FROM Users u
INNER JOIN (
    WITH RECURSIVE followers(follower_id, followee_id, level) AS (
        SELECT follower_id, followee_id, 1 FROM Follows WHERE followee_id IN (
            SELECT user_id FROM Purchases WHERE product_id = $PRODUCT_ID
        )
        UNION
        SELECT f.follower_id, f.followee_id, level + 1
        FROM Follows f
        JOIN followers ON f.follower_id = followers.followee_id
        WHERE level < $LEVEL
    )
    SELECT followee_id FROM followers
) AS f ON u.user_id = f.followee_id;


------------------ Création de la DB-------------------------
CREATE DATABASE Relational;
USE Relational;


------------------Création des Tables-----------------------
CREATE TABLE Users (
  user_id INT(11) PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(50)
);

CREATE TABLE Products (
  product_id INT PRIMARY KEY AUTO_INCREMENT,
  product_name VARCHAR(50)
);

CREATE TABLE Purchases (
  purchase_id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  product_id INT,
  purchase_date DATE,
  FOREIGN KEY (user_id) REFERENCES Users(user_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Follows (
  follow_id INT PRIMARY KEY AUTO_INCREMENT,
  follower_id INT,
  followee_id INT,
  follow_date DATE,
  FOREIGN KEY (follower_id) REFERENCES Users(user_id),
  FOREIGN KEY (followee_id) REFERENCES Users(user_id)
);

DELIMITER //
CREATE OR REPLACE PROCEDURE add_random_followers_to_user() 
BEGIN
    DECLARE max_users INT;
    DECLARE num_followers INT;
    DECLARE user_id INT DEFAULT 1;
    DECLARE i INT DEFAULT 1;
    DECLARE rand_num INT;
    
    SELECT COUNT(*) INTO max_users FROM Users;

    WHILE user_id <= max_users DO
      SELECT COUNT(*) INTO num_followers FROM Follows WHERE follower_id = user_id;
      IF num_followers = 0 THEN
        SET i = 0;
        SET num_followers = FLOOR(RAND() * 20);
        WHILE i <= num_followers DO
            SET rand_num = FLOOR(RAND() * max_users);
            INSERT INTO Follows (follower_id, followee_id, follow_date)
            VALUES (user_id, rand_num+1, NOW());
            SET i = i + 1;
        END WHILE;
      END IF;
      
      SET user_id = user_id + 1;
    END WHILE;
END; //
DELIMITER ;

DELIMITER //
CREATE OR REPLACE PROCEDURE add_random_product_to_user() 
BEGIN
    DECLARE max_users INT;
    DECLARE max_product INT;
    DECLARE num_product INT;
    DECLARE user_id INT DEFAULT 1;
    DECLARE i INT DEFAULT 1;
    DECLARE rand_num INT;
    
    SELECT COUNT(*) INTO max_users FROM Users;
    SELECT COUNT(*) INTO max_product FROM Products;

    WHILE user_id <= max_users DO
      SELECT COUNT(*) INTO num_product FROM Purchases p WHERE p.user_id = user_id;
      IF num_product = 0 THEN
        SET i = 0;
        SET num_product = FLOOR(RAND() * 5);
        WHILE i <= num_product DO
            SET rand_num = FLOOR(RAND() * max_product);
            INSERT INTO Purchases (user_id, product_id, purchase_date)
            VALUES (user_id, rand_num+1, NOW());
            SET i = i + 1;
        END WHILE;
      END IF;
      
      SET user_id = user_id + 1;
    END WHILE;
END; //
DELIMITER ;

----------------Insertion des données --------------------------
INSERT INTO Users (username)
SELECT CONCAT('User ', n)
FROM (SELECT ROW_NUMBER() OVER () AS n FROM information_schema.columns) AS nums
WHERE n <= 10000;

CALL add_random_followers_to_user();
-- select COUNT(*) from Follows where follower_id=520;

INSERT INTO Products (product_name)
SELECT CONCAT('Product', n)
FROM (SELECT ROW_NUMBER() OVER () AS n FROM information_schema.columns) AS nums
WHERE n <= 10000;


CALL add_random_product_to_user();
-- select COUNT(*) from Purchases where user_id=520;

------------------INDEX-------------------

CREATE INDEX idx_followers_followee_id ON Follows (followee_id);
CREATE INDEX idx_purchases_user_id ON Purchases (user_id);
CREATE INDEX idx_purchases_product_id ON Purchases (product_id);
CREATE INDEX idx_products_product_name ON Products (product_name);

------------------Requete 1 ------------

--On demande a l'utilisateurs de rentré un user et un niveau de profondeur.

--$LEVEL
--$Follower_ID

WITH RECURSIVE followers(follower_id, followee_id, level) AS (
SELECT follower_id, followee_id, 1 FROM Follows WHERE follower_id = $Follower_ID UNION
SELECT f.follower_id, f.followee_id, level + 1
FROM Follows f
JOIN followers ON f.follower_id = followers.followee_id
WHERE level < $LEVEL)
SELECT f.follower_id , p.product_id, p.product_name, COUNT(*) as num_purchases
FROM followers f 
JOIN Purchases pur ON f.followee_id = pur.user_id
JOIN Products p ON pur.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY num_purchases DESC;


-- On peut changer le LEVEL pour avoir une profondeur selon ce que l'on souhaite
-- Le choix de l'utilisateur est le centre de notre cercle on peut changer pour spécifier un utilisateur particulier ( Ici un influanceur est pertinant)


------------------Requete 2 ------------


--On demande a l'utilisateurs de rentré un influancere et un niveau de profondeur.

--$LEVEL
--$Follower_ID
--$Product_Name

WITH RECURSIVE followers(follower_id, followee_id, level) AS (
SELECT follower_id, followee_id, 1 FROM Follows WHERE follower_id = $Follower_ID
   UNION
   SELECT f.follower_id, f.followee_id, level + 1
   FROM Follows f
   JOIN followers ON f.follower_id = followers.followee_id
   WHERE level < $LEVEL
 )
 SELECT f.follower_id , p.product_id, p.product_name, COUNT(*) as num_purchases
 FROM followers f
 JOIN Purchases pur ON f.followee_id = pur.user_id
 JOIN Products p ON pur.product_id = p.product_id
 WHERE p.product_name= $Product_Name
 ORDER BY f.follower_id;
 
 
 -------------Requete 3 -----------------
 
 
-- Remplacer $PRODUCT_ID par l'identifiant du produit recherché
-- Remplacer $LEVEL par le niveau maximal souhaité pour le cercle de followers

SELECT COUNT(DISTINCT f.followee_id) AS num_followees
FROM Users u
INNER JOIN (
    WITH RECURSIVE followers(follower_id, followee_id, level) AS (
        SELECT follower_id, followee_id, 1 FROM Follows WHERE followee_id IN (
            SELECT user_id FROM Purchases WHERE product_id = $PRODUCT_ID
        )
        UNION
        SELECT f.follower_id, f.followee_id, level + 1
        FROM Follows f
        JOIN followers ON f.follower_id = followers.followee_id
        WHERE level < $LEVEL
    )
    SELECT followee_id FROM followers
) AS f ON u.user_id = f.followee_id;
